Santa Cruz

    The LockIT Pro b.05  is the first of a new series  of locks. It is
    controlled by a  MSP430 microcontroller, and is  the most advanced
    MCU-controlled lock available on the  market. The MSP430 is a very
    low-power device which allows the LockIT  Pro to run in almost any
    environment.

    The  LockIT  Pro   contains  a  Bluetooth  chip   allowing  it  to
    communiciate with the  LockIT Pro App, allowing the  LockIT Pro to
    be inaccessable from the exterior of the building.

    There  is no  default  password  on the  LockIT  Pro HSM-1.   Upon
    receiving the  LockIT Pro,  a new  password must  be set  by first
    connecting the LockitPRO HSM to  output port two, connecting it to
    the LockIT Pro App, and entering a new password when prompted, and
    then restarting the LockIT Pro using the red button on the back.
    
    LockIT Pro Hardware  Security Module 1 stores  the login password,
    ensuring users  can not access  the password through  other means.
    The LockIT Pro  can send the LockIT Pro HSM-1  a password, and the
    HSM will  return if the password  is correct by setting  a flag in
    memory.
    
    This is Hardware  Version B.  It contains  the Bluetooth connector
    built in, and two available  ports: the LockIT Pro Deadbolt should
    be  connected to  port  1,  and the  LockIT  Pro  HSM-1 should  be
    connected to port 2.

    This is Software Revision 05.  We have added further mechanisms to
    verify that passwords which are too long will be rejected.
    
My assumption here is that it's going to have a similar vulnerability to Johannesburg. The functions are comparatively large, though.

It asks for the username, does a strcpy, asks for the password, does a strcpy, checks length in some way, then checks whether the password is right.

It checks the username buffer by seeing the address where the buffer ends, subtracting the address of the beginning, and comparing the result with 0x10 which is sitting right before the password buffer.

I'm going to try to overflow the username buffer to overwrite the desired length (which sits between the username and password variables) with a new length, which I did with a*18+(0x0030), overwriting the length variable and still having a null byte

This successfully got me past the first comparison.

It later does a check with a different value for the password. By testing it again with 6161616161616161616161616161616162623000, I see it's immediately before the username length value.

I do it again using 6161616161616161616161616161616102023000 this time, because it does a jc instead of jnc, meaning it's checking for a less-than instead of greater-than.

I've gotten past both length checks with that username because I was able to overflow into the length checker variables without messing up the password.

It does a stop before hitting the return, so I can't take advantage of that.

Oh, the way this INT thing works into the system is it makes a call and gives the hardware data to check the password against, so the system would be setting the "correct" flag from outside.

It does a compare with -0x6(r4) to see that there's a null byte at the end of the password. That's how it checks password length.

WAIT I CAN BUFFER OVERFLOW THE USERNAME AS FAR AS I WANT BECAUSE I CAN SET A NULL BYTE AT THE END OF THE PASSWORD ANYWAY

username: 6161616161616161616161616161616102023061616161616161616161616161616161616161616262623a46

password: 616161616161616161616161616161616100 (a*17+0x00)