Algiers
    
    The LockIT Pro d.01  is the first of a new series  of locks. It is
    controlled by a  MSP430 microcontroller, and is  the most advanced
    MCU-controlled lock available on the  market. The MSP430 is a very
    low-power device which allows the LockIT  Pro to run in almost any
    environment.

    The  LockIT  Pro   contains  a  Bluetooth  chip   allowing  it  to
    communiciate with the  LockIT Pro App, allowing the  LockIT Pro to
    be inaccessable from the exterior of the building.

    LockIT Pro Account Manager solves the problem of sharing passwords
    when  multiple users  must  have  access to  a  lock. The  Account
    Manager contains  a mapping of users  to PINs, each of  which is 4
    digits.  The  system supports  hundreds of users,  each configured
    with his or her own PIN,  without degrading the performance of the
    manager.

    There are no accounts set up  on the LockIT Pro Account Manager by
    default. An administrator must first initialize the lock with user
    accounts  and  their  PINs.  User  accounts  are  by  default  not
    authorized  for access,  but can  be authorized  by attaching  the
    Account  Manager  Authorizer.  This  prevents  users  from  adding
    themselves to the lock during its use.
    
    This is Hardware  Version D.  It contains  the Bluetooth connector
    built in, and one available port, to which the LockIT Pro Deadbolt
    should be connected. When authorizing PINs, the Deadbolt should be
    disconnected and the Authorizer should be attached in its place.

    This   is  Software   Revision   01.  It is a  much more  advanced
    version of other locks, but the first Version D release.
    
When the password block gets freed, data is written above it (in terms of stack location). The affected addresses are 2420-2423.

Toying with it a bit more eventually got me the input combination asdfasdfasdfasdfDDFF and asdfasdf which wrote DD to 4646 (FF)

I will use it to write data to another location. In this case, I will overwrite the return address at 4394 with 4564. This would allow me to return from the free function to the start of unlock_door by modifying the stack data.

6161616161616161616161616161616164459443

Well that sort of worked. Unfortunately I overwrote unlock_door as well. I will try to overwrite another address.

Instead, I'm going to overwrite the end of the free function with nops so it rolls into unlock_door. It occurs in memory just before the unlock_door function so by removing the return instruction I can get it to execute.

6161616161616161616161616161616144446245