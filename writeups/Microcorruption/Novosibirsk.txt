Novosibirsk

	The LockIT Pro c.02  is the first of a new series  of locks. It is
    controlled by a  MSP430 microcontroller, and is  the most advanced
    MCU-controlled lock available on the  market. The MSP430 is a very
    low-power device which allows the LockIT  Pro to run in almost any
    environment.

    The  LockIT  Pro   contains  a  Bluetooth  chip   allowing  it  to
    communiciate with the  LockIT Pro App, allowing the  LockIT Pro to
    be inaccessable from the exterior of the building.

    There  is no  default  password  on the  LockIT  Pro HSM-2.   Upon
    receiving the  LockIT Pro,  a new  password must  be set  by first
    connecting the LockitPRO HSM to  output port two, connecting it to
    the LockIT Pro App, and entering a new password when prompted, and
    then restarting the LockIT Pro using the red button on the back.
    
    LockIT Pro Hardware  Security Module 2 stores  the login password,
    ensuring users  can not access  the password through  other means.
    The LockIT Pro  can send the LockIT Pro HSM-2  a password, and the
    HSM will  directly send the  correct unlock message to  the LockIT
    Pro Deadbolt  if the password  is correct, otherwise no  action is
    taken.
    
    This is Hardware  Version C.  It contains  the Bluetooth connector
    built in, and two available  ports: the LockIT Pro Deadbolt should
    be  connected to  port  1,  and the  LockIT  Pro  HSM-2 should  be
    connected to port 2.

    This is Software Revision 02. We have improved the security of the
    lock by ensuring passwords can not be too long.
	
username gets stored at 0x2400 and then moved via strcpy to 0x420c

It prints the username back (looks like another format string vuln).

...and then a putchar? Alright then.

I was able to get a load address unaligned so it looks like I can make it overwrite a byte.

I'm going to try and overwrite the return address for printf with the start of my input. Wait, no, I can't do that because I have a cap on the data I'm overwriting.

Either way, at the end of that last printf, it takes 0x4208 for the return address of the function, which is 44a7.

Okay, I know I could overwrite any value with something as large as: 52

BEGIN MESSING AROUND
a644aa44ac44256e256e256e allowed me to overwrite the ending of main with random data so let's see what happened.

Oh, that broke it. I'm kinda messing around here so let me see what happens if I overwrite a return to 0x12 (maybe it'll slide all the way through to the input buffer?)

Long story short I managed to get it to finish executing main and then start executing conditional_unlock_door again and then it returned to some init functions and broke later on.
END MESSING AROUND

Okay, input of 0842256e (overwriting 0x4208 (location of return address of printf when it was printing the username back)) got me to return to 0x2.

0842616161616161616161616161256e got me to return to 0xe.

Then there were a bunch of rrc pc instructions which are not helpful. I had been hoping maybe it'd execute through all the null bytes and do nothing particularly detrimental and eventually execute at 0x2400 which was my input.

So I padded it more because why not?

08426161616161616161616161616161256e got me to return to 0x10 which...

Oh wow. It's called trap_interrupt which is returning back to my input.

Guess I'll replace those nops with shellcode! Alex, I'm totally borrowing yours from Montevideo because mine was a convoluted mess. I hope that's okay.

08426161616161616161616161616161256e ->
08420fef3f8081ff0f12b0124c456161256e -> //Need to change the call address
08420fef3f8081ff0f12b01236456161256e