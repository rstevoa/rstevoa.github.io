Cusco

    The LockIT Pro b.02  is the first of a new series  of locks. It is
    controlled by a  MSP430 microcontroller, and is  the most advanced
    MCU-controlled lock available on the  market. The MSP430 is a very
    low-power device which allows the LockIT  Pro to run in almost any
    environment.

    The  LockIT  Pro   contains  a  Bluetooth  chip   allowing  it  to
    communiciate with the  LockIT Pro App, allowing the  LockIT Pro to
    be inaccessable from the exterior of the building.

    There  is no  default  password  on the  LockIT  Pro HSM-1.   Upon
    receiving the  LockIT Pro,  a new  password must  be set  by first
    connecting the LockitPRO HSM to  output port two, connecting it to
    the LockIT Pro App, and entering a new password when prompted, and
    then restarting the LockIT Pro using the red button on the back.
    
    LockIT Pro Hardware  Security Module 1 stores  the login password,
    ensuring users  can not access  the password through  other means.
    The LockIT Pro  can send the LockIT Pro HSM-1  a password, and the
    HSM will  return if the password  is correct by setting  a flag in
    memory.
    
    This is Hardware  Version B.  It contains  the Bluetooth connector
    built in, and two available  ports: the LockIT Pro Deadbolt should
    be  connected to  port  1,  and the  LockIT  Pro  HSM-1 should  be
    connected to port 2.

    This is Software Revision 02. We have improved the security of the
    lock by  removing a conditional  flag that could  accidentally get
    set by passwords that were too long.
    
This time the last test done before telling the user they're allowed in is an r15 test right after test_password_valid. The goal became tracking r15 and how to not set it to 0.

Moving backwards, the last thing that happens to r15 is a sign extension. This shouldn't change any values.

Moving further back, there is a mov.b (move one byte) operation which sets r15 to whatever is in r4-0x4 (which is at address 43e8).

I kept moving backwards to see what sets that byte to 0, and it occurs earlier in the test_password_valid function. That function never appears to access that data again, nor does it change r4, and the call to INT also doesn't appear to change either of them.

I actually was unable to find any other time where a non-register gets accessed / is modified by / modifies data in the meantime. I don't know how this lock is supposed to work correctly.

I come at it again trying to see how much data I can write in. It allows me to put "password"*6, or up to 48 bytes of data.

Knowing that the password buffer will start at 43ee (from previous experiments), I looked at what follows the 16 bytes of expected input (43fe and so on).

I was able to figure out that this data would be from the previous stack (login function).

Placing a breakpoint towards the end of the login function shows me that by the time ret is reached, the sp now points to 43fe.

This means that ret will set the pc to whatever is there. I solve it with the input passwordpassword(E (the last two characters decode to the address of the unlock_door call).