Jakarta

	The LockIT Pro b.06  is the first of a new series  of locks. It is
    controlled by a  MSP430 microcontroller, and is  the most advanced
    MCU-controlled lock available on the  market. The MSP430 is a very
    low-power device which allows the LockIT  Pro to run in almost any
    environment.

    The  LockIT  Pro   contains  a  Bluetooth  chip   allowing  it  to
    communiciate with the  LockIT Pro App, allowing the  LockIT Pro to
    be inaccessable from the exterior of the building.

    There  is no  default  password  on the  LockIT  Pro HSM-1.   Upon
    receiving the  LockIT Pro,  a new  password must  be set  by first
    connecting the LockitPRO HSM to  output port two, connecting it to
    the LockIT Pro App, and entering a new password when prompted, and
    then restarting the LockIT Pro using the red button on the back.
    
    LockIT Pro Hardware  Security Module 1 stores  the login password,
    ensuring users  can not access  the password through  other means.
    The LockIT Pro  can send the LockIT Pro HSM-1  a password, and the
    HSM will  return if the password  is correct by setting  a flag in
    memory.
    
    This is Hardware  Version B.  It contains  the Bluetooth connector
    built in, and two available  ports: the LockIT Pro Deadbolt should
    be  connected to  port  1,  and the  LockIT  Pro  HSM-1 should  be
    connected to port 2.

    This is Software Revision 06.  We have added further mechanisms to
    verify that passwords which are too long will be rejected.
	
First it asks for the username and strcpy's it. Then it scans the whole username until it reaches a null byte, effectively counting the length. Then it does a compare with 0x21 to make sure you're not over 32 bytes.

Then it asks for a password and strcpy's that as well, adding it right after the username. It does another count, adding the result to the username length.

If the compare carries, it stops the program. But it compares one byte. Perhaps if I make it long enough, it'll wrap around to 0x0100 and I'll be fine again.

I was able to write so many a's that it wrapped around to being 0x120 bytes long and so the cmp.b r11, r15 doesn't carry.

user:
6161616161616161616161616161616161616161616161616161616161616161

pass:


Let me try to overwrite the right bytes with the address of the call to unlock_door.

user:
6161616161616161616161616161616161616161616161616161616161616161

pass:
616161611c

I understand I likely put more bytes in than I needed to to make the compare not carry, but hey! It worked!